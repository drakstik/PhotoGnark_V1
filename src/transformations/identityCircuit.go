package transformations

import (
	tedwards "github.com/consensys/gnark-crypto/ecc/twistededwards"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/std/algebra/native/twistededwards"
	"github.com/consensys/gnark/std/hash/mimc"
	"github.com/consensys/gnark/std/signature/eddsa"
)

type IdentityCircuit struct {
	PublicKey       eddsa.PublicKey   `gnark:",public"`
	EdDSA_Signature eddsa.Signature   `gnark:",public"`
	ImgBytes        frontend.Variable `gnark:",public"` // Image as a Big Endian bytes; used in signature verification
}

func (circuit *IdentityCircuit) Define(api frontend.API) error {
	circuit.Edit(api)

	return nil
}

// TODO: Test
func (idCircuit IdentityCircuit) Edit(api frontend.API) error {
	// set the twisted edwards curve to use
	curve, err := twistededwards.NewEdCurve(api, tedwards.BN254)
	if err != nil {
		return err
	}

	// hash function
	mimc, err := mimc.NewMiMC(api)
	if err != nil {
		return err
	}

	// tip: gnark profiles enable circuit developers to measure the number of constraints
	// generated by a part of the (or the entire) circuit, using pprof.
	// see github.com/consensys/gnark/profile

	// verify the EdDSA signature
	eddsa.Verify(curve, idCircuit.EdDSA_Signature, idCircuit.ImgBytes, idCircuit.PublicKey, &mimc)

	// tip: api.Println behaves like go fmt.Println but accepts frontend.Variable
	// that are resolved at Proving time
	api.Println("message", idCircuit.ImgBytes)

	return err
}
