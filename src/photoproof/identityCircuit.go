package photoproof

import (
	"fmt"

	"github.com/consensys/gnark-crypto/ecc"
	tedwards "github.com/consensys/gnark-crypto/ecc/twistededwards"
	"github.com/consensys/gnark-crypto/signature"
	"github.com/consensys/gnark/backend/groth16"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"
	"github.com/consensys/gnark/std/algebra/native/twistededwards"
	"github.com/consensys/gnark/std/hash/mimc"
	"github.com/consensys/gnark/std/signature/eddsa"
)

type IdentityCircuit struct {
	PublicKey       eddsa.PublicKey   `gnark:",public"`
	EdDSA_Signature eddsa.Signature   `gnark:",public"`
	ImgBytes        frontend.Variable `gnark:",public"` // Image as a Big Endian bytes; used in signature verification
}

// GeneratePCD_Keys implements TransformationCircuit.
func (circuit IdentityCircuit) GeneratePCD_Keys(sk signature.Signer, trType string, m map[string]PCD_Keys) (map[string]PCD_Keys, error) {

	// Set the security parameter (BN254) and compile a constraint system (aka compliance_predicate)
	compliance_predicate_id, err := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, &circuit)
	if err != nil {
		fmt.Println("generatePCD_Keys(): ERROR while compiling constraint system for " + trType)
		return nil, err
	}

	// Generate PCD Keys from the compliance_predicate
	provingKey, verifyingKey, err := groth16.Setup(compliance_predicate_id)
	if err != nil {
		fmt.Println("generatePCD_Keys(): ERROR while generating PCD Keys from the constraint system for" + circuit.GetType())
		return nil, err
	}

	pcd_keys := PCD_Keys{
		ProvingKey:   provingKey,
		VerifyingKey: verifyingKey,
	}

	m[circuit.GetType()] = pcd_keys

	return m, err
}

func (circuit IdentityCircuit) Define(api frontend.API) error {
	// set the twisted edwards curve to use
	curve, err := twistededwards.NewEdCurve(api, tedwards.BN254)
	if err != nil {
		return err
	}

	// hash function
	mimc, err := mimc.NewMiMC(api)
	if err != nil {
		return err
	}

	// tip: gnark profiles enable circuit developers to measure the number of constraints
	// generated by a part of the (or the entire) circuit, using pprof.
	// see github.com/consensys/gnark/profile

	// verify the EdDSA signature
	eddsa.Verify(curve, circuit.EdDSA_Signature, circuit.ImgBytes, circuit.PublicKey, &mimc)

	// tip: api.Println behaves like go fmt.Println but accepts frontend.Variable
	// that are resolved at Proving time
	api.Println("message", circuit.ImgBytes)

	return err
}

func (idCircuit IdentityCircuit) GetType() string {
	return "id_Fr"
}
